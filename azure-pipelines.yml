# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- Develop
- Production

variables:
  trivyVersion: 0.36.0

pool:
  vmImage: ubuntu-latest

steps:
- script: ls
  displayName: 'Run a one-line script'

- bash: |
    short_hash=`git rev-parse --short=7 HEAD`
    echo ""
    echo "Full git hash:  $(Build.SourceVersion)"
    echo "Short git hash: $short_hash"
    echo ""
    ## Fail step if full hash does not start with short hash
    if [[ $(Build.SourceVersion) != $short_hash* ]]; then
      echo "--> Hashes do not match! Aborting."
      exit 1
    fi
    echo "--> Hashes match. Storing short hash for subsequent steps."
    ## Store variable for subsequent steps
    echo "##vso[task.setvariable variable=short_hash]$short_hash"
  workingDirectory: $(Build.SourcesDirectory)
  displayName: Get short git hash

- script: |
    sudo apt-get install rpm
    wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
    sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
    trivy -v
  displayName: 'Download and install Trivy'

- task: CmdLine@2
  inputs:
    script: |
      docker build -f Dockerfile -t practicalexam.azurecr.io/celestial-interview-app:$(Build.SourceBranchName)-$(short_hash) .

- task: CmdLine@2
  displayName: "Run trivy scan"
  inputs:
    script: |
      trivy image practicalexam.azurecr.io/celestial-interview-app:$(Build.SourceBranchName)-$(short_hash)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      az acr login --name PracticalExam
      docker push practicalexam.azurecr.io/celestial-interview-app:$(Build.SourceBranchName)-$(short_hash)
- task: Docker@2
  inputs:
    containerRegistry: 'practicalexam'
    repository: 'practicalexam.azurecr.io'
    command: 'push'
    tags: 'celestial-interview-app:$(Build.SourceBranchName)-$(short_hash)'

